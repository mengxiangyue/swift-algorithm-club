# 算法设计技术

当你面对一个新问题是，你要做些什么？你需要找到一个解决它的算法。

### 它和其他问题类似吗？

如果你能够依据一个更加通用的问题构造你的问题，那么你可能可以使用一个现有的算法。为什么还有重复造这个轮子呢？

有一点，我喜欢 Steven Skiena 的 [The Algorithm Design Manual](http://www.algorist.com)，它包含了一系列的问题和你可以尝试的解决方案。（它的 [算法仓库](http://www3.cs.stonybrook.edu/~algorith/)）。

### 先从蛮力说起

太天真了，蛮力型的解决方法对于实际应用来说经常都太慢了，但是他们仍然是一个不错的起点。通过书写蛮力型的解决方法，你学会了理解问题到底是什么。


一旦你有了一个蛮力型实现，你就可以用它来验证你提出的任何改进都是正确的。

如果只使用小数据集，那么蛮力方法本身可能就足够好了。不要陷入“过早优化陷阱！

### 分而治之（分布解决）

>"When you change the way you look at things, the things you look at change."</br>
>Max Planck, Quantum theorist and Nobel Prize Winner

>"只要你肯改变看事物的方式, 一切都会看起来不同"</br>

分而治之是一种处理大问题的方法，通过把它分解成许多的小问题，然后朝着解决方案前进。

与其把整个问题看成一个单一的、庞大而复杂的任务，不如把问题分为相对较小的更容易理解和处理的问题。

你解决小问题，并且组合这些结果，直到最后只留下了一个问题。在每一步中，手头上的问题都会缩小且得到的结果更加成熟，直到你有最终正确的解决方案为止。

解决小问题和在其他部分重复应用（或者是递归）相同的解决方法，它能让你在很短的时间内获取答案。
